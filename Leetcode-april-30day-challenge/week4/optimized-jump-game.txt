//O(1) space complextiy and O(n) Time


Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:

Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.



solution:
class Solution {
public:
    bool canJump(vector<int>& a) {
        int i,n=a.size(),mx=1;
        if(n==1)
            return true;
        else if(a[0]==0)
            return false;
        for(i=0;i<n-1;i++){
            mx=mx-1;         // moving 1 index forward means i step is reduced
            mx=max(mx,a[i]);  ////maintainig the maximum numbers of jumps possible at every postion
           if(mx==0) // if mx=0 the cant move further
               return false;
            if( mx+i>=n-1)
                return true;
            
        }
        return false;
    }
};