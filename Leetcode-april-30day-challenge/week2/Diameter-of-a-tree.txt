Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.




Solution:
Diameter is the longest path between two nodes.
Logic:  The solution =(height-of-left-sub-tree+height-of-right-subtree)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int ans=0;
     int goo(TreeNode* node){
         if(node==NULL)
             return 0;
         int lh=goo(node->left);
         int rh=goo(node->right);
         ans=max(ans,lh+rh);
         return 1+max(lh,rh);
     }
    int diameterOfBinaryTree(TreeNode* node) {
        goo(node);
        return ans;
    }
};