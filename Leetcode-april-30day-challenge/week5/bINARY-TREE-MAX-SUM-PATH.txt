Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42



SOLUTION:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    /*There are three cases
    1) select only current node
    2)select any one of the two child nodes
    3)select both child nodes by doing this we need to select the root also .by doing this we cannot continue chain
    */



ACTUAL SOLUTION:
public:
    int ans=INT_MIN;
    int goo(TreeNode* root) {
       if(root==NULL)
           return 0;
       int la=goo(root->left);
       int ra=goo(root->right);
       int c1=max(root->val+max(la,ra),root->val);//specifically written these two values because we can continue chain by selecting any one of this and this is the reason we are returning c1
        int c2=max(c1,root->val+la+ra);//in c2 if we selecting root->val+la+ra which means that we cannot continue chain
        ans=max(ans,c2);
        return c1;
    }
    int maxPathSum(TreeNode* root) {
        goo(root);
        return ans;
    }
};