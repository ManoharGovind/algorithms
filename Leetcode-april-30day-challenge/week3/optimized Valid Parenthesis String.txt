OPTIMIZED SPACE COMPLEXITY:

Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.
Example 1:
Input: "()"
Output: True
Example 2:
Input: "(*)"
Output: True
Example 3:
Input: "(*))"
Output: True


SOLUTION:
TIME COMPLEXITY=O(n) SPACE COMPLEXITY=O(1)

class Solution {
public:
    bool checkValidString(string s) {
        int ans=0,i,n=s.length();
        for(i=0;i<n;i++){
            if(s[i]==')')
                ans--;
            else
                ans++;
            if(ans<0)
                return false;
        }
        if(ans<0)
            return false;
        ans=0;
        for(i=n-1;i>=0;i--){
            if(s[i]=='(')
                ans--;
            else
                ans++;
            if(ans<0)
                return false;
        }
        if(ans<0)
            return false;
        else
            return true;
            
        
    }
};