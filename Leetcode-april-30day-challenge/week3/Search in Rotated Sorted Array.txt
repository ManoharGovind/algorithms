  Search in Rotated Sorted Array
Solution
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1


class Solution {
public:
    int  binsearch(vector<int>& arr,int l,int h,int key){
        int m=0;
        while(l<=h){
            m=(l+h)/2;
            if(arr[m]==key)
                return m;
            else if(arr[m]<key)
                l=m+1;
            else if(arr[m]>key){
                h=m-1;
            }
        }
        return -1;
    }
    int search(vector<int>& arr, int target) {
        int l=0,h=arr.size()-1,m,p,f=0;
        if(h==0){
            if(target==arr[0])
                return 0;
            else 
                return -1;
        }
        if(h==1){
            if(target==arr[0])
                return 0;
            else if(target==arr[1])
                return 1;
            else
                return -1;
        }
        while(l<=h){
            m=(l+h)/2;
            if(m+1<arr.size() && arr[m]>arr[m+1]){
                p=m;
                f=1;
                break;
            }
            if(m-1>=0 && arr[m-1]>arr[m]){
                p=m-1;
                f=1;
                break;
            }
            else{
                if(arr[l]<arr[m]){
                    l=m+1;
                }
                else
                    h=m-1;
            }
        }
        //cout<<p<<" ";
        if(f==0)
            return binsearch(arr,0,arr.size()-1,target);
        else if(arr[0]<target){
            return binsearch(arr,0,p,target);
        }
        else if(arr[0]>target){
            return binsearch(arr,p+1,arr.size()-1,target);
        }
        else
            return 0;
    }
};