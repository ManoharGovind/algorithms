Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.
Example 1:
Input: "()"
Output: True
Example 2:
Input: "(*)"
Output: True
Example 3:
Input: "(*))"
Output: True
Note:
The string size will be in the range [1, 100].


SOLUTION:

TIME-COMPLEXITY IS O(n) BUT SPACE IS TAKING MORE


class Solution {
public:
    bool checkValidString(string s) {
        stack<char>st;
        stack<int>pos;
        int i,n=s.length(),l=0,r=0,v,f=0;
        vector<int>sp(n+1,0);
        map<int,char>mp;
        for(i=0;i<n;i++){
            if(s[i]=='('){
                 mp[i]=s[i];
                l=l+1;
                st.push('(');
                pos.push(i);
            }
            else if(s[i]==')'){
                 mp[i]=s[i];
                r=r+1;
                if(st.size()>0){
                st.pop();
                mp[i]='n';
                mp[pos.top()]=0;
                pos.pop();
                r=r-1;
                l=l-1;
                }
            }
            else{
                sp[i]=11;
            }
        }
        if(l==0 && r==0)
            return true;
        for(auto it=mp.begin();it!=mp.end();it++){
            if(it->second=='('){
                v=it->first;
                f=0;
                for(i=v+1;i<n && f==0;i++){
                    if(sp[i]==11){
                         f=1;
                        sp[i]=0;
                    }
                        
                }
                if(f==0)
                    return false;
                else
                    l=l-1;
            }
            if(it->second==')'){
                v=it->first;
                f=0;
                for(i=0;i<v && f==0;i++){
                    if(sp[i]==11){
                         f=1;
                        sp[i]=0;
                    }
                }
                if(f==0)
                    return false;
                else
                    r=r-1;
            }
        }
        if(l==0 && r==0)
            return true;
        else
            return false;
    }
};